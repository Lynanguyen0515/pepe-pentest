import unittest
import sys
from io import StringIO

class TestXor(unittest.TestCase):
    
    def test_help(self):
        captured_output = StringIO()
        sys.stdout = captured_output
        help()
        sys.stdout = sys.__stdout__
        self.assertIn("XOR Decoder/Encoder", captured_output.getvalue())
        self.assertIn("Options:", captured_output.getvalue())
        self.assertIn("-h  Print help message.", captured_output.getvalue())
        self.assertIn("-x  String and key to be xored.", captured_output.getvalue())
        self.assertIn("Example: xor -x \"Hello, world\" \"101\"", captured_output.getvalue())
    
    def test_invalid_option(self):
        captured_output = StringIO()
        sys.stdout = captured_output
        main(["-k", "Hello, world", "101"])
        sys.stdout = sys.__stdout__
        self.assertIn("Could not perform xor-ing operation", captured_output.getvalue())
        self.assertIn("XOR Decoder/Encoder", captured_output.getvalue())
        self.assertIn("Options:", captured_output.getvalue())
        self.assertIn("-h  Print help message.", captured_output.getvalue())
        self.assertIn("-x  String and key to be xored.", captured_output.getvalue())
    
    def test_missing_option_arg(self):
        captured_output = StringIO()
        sys.stdout = captured_output
        main(["-x", "Hello, world"])
        sys.stdout = sys.__stdout__
        self.assertIn("Could not perform xor-ing operation", captured_output.getvalue())
        self.assertIn("XOR Decoder/Encoder", captured_output.getvalue())
        self.assertIn("Options:", captured_output.getvalue())
        self.assertIn("-h  Print help message.", captured_output.getvalue())
        self.assertIn("-x  String and key to be xored.", captured_output.getvalue())
    
    def test_missing_required_args(self):
        captured_output = StringIO()
        sys.stdout = captured_output
        main([])
        sys.stdout = sys.__stdout__
        self.assertIn("Could not perform xor-ing operation", captured_output.getvalue())
        self.assertIn("XOR Decoder/Encoder", captured_output.getvalue())
        self.assertIn("Options:", captured_output.getvalue())
        self.assertIn("-h  Print help message.", captured_output.getvalue())
        self.assertIn("-x  String and key to be xored.", captured_output.getvalue())
        
    def test_single_char_key(self):
        captured_output = StringIO()
        sys.stdout = captured_output
        main(["-x", "Hello, world", "1"])
        sys.stdout = sys.__stdout__
        self.assertEqual(captured_output.getvalue(), "b'Hfnmp/\"xyzn\\x07'\n")
        
    def test_multi_char_key(self):
        captured_output = StringIO()
        sys.stdout = captured_output
        main(["-x", "Hello, world", "abc"])
        sys.stdout = sys.__stdout__
        self.assertEqual(captured_output.getvalue(), "b'Hgdln%+scmr'\n")
        
    def test_empty_input(self):
        captured_output = StringIO()
        sys.stdout = captured_output
        main(["-x", "", "101"])
        sys.stdout = sys.__stdout__
        self.assertEqual(captured_output.getvalue(), "b''\n")
    
    def test_empty_key(self):
        captured_output = StringIO()
        sys.stdout = captured_output
        main(["-x", "Hello, world", ""])
        sys.stdout = sys.__stdout__
        self.assertEqual(captured_output.getvalue(), "b''\n")

    def main(args):
        try: 
            opts, args = getopt.getopt(args, "hx:", ["help", "xor"])
        except getopt.GetoptError:
            help()
            sys.exit(2)
        string = None 
        key = None 
        for s, a in opts: 
            if s in ("-x", "--xor"):
                string = args[0]
                key = args[1]
            if s in ("-h", "--help"):
                help()
                sys.exit()
        if string is None: 
            help()
            sys.exit()
        if key is None:
            help()
            sys.exit()
        try:
            t = xor(string, key)
            print(str(t))
        except: 
            print("Could not perform xor-ing operation")

if __name__ == '__main__':
    unittest.main()
